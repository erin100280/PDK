if(2) {//-loader
   var __$$_$log=console.log, __$$_$curLog=[];

   function Load(__$$_$path) {
      var __$$_$z
         ,  __$$_$fs=require('fs')
         ,  __$$_$ReadFile=__$$_$fs.readFileSync

         ,  __$$_$fc=__$$_$fs.readFileSync(__$$_$path).toString()

         ,  exports={}
         ,  console={
               log:function(val) {
                  __$$_$curLog.push({ val: val });
                  __$$_$log('console.log - '+val);
               }
            }
      ;
      
      //__$$_$fc=__$$_$fs.readFileSync(__$$_$path).toString();
      eval(__$$_$fc);
      
      return exports;
   };
};
//var _console=console

var z, z2, z4, zz, f, i, ii, l, ll
   ,  fs=require('fs')
   
   ,  args=process.argv
   ,  cout=console.log

   ,  buffer=require('buffer').Buffer
   ,  eventBuffer=new buffer('')
   ,  eventBuffer_Write=eventBuffer.write
   ,  events=[]
;

function KeyToExit(msg) {
   if(msg) cout('\n\n'+msg);
   process.stdin.setEncoding('utf8');
   process.stdin.on('data', function() { process.exit(); });
   process.stdin.resume();
};
function FileExt(filename) {
    var i = filename.lastIndexOf('.');
    return (i < 0) ? '' : filename.substr(i);
};

function Main(filename, evnts) {
   var z, z2, z4, zz, tp, parts, i, ii, l, ll, rv, ev=evnts||events;

   z=filename;
   z2=FileExt(z);

   cout('z='+z);
   f=Load(z);

   if(f instanceof Array) tp='group';
   else if(typeof f=='object') tp='test';
   else throw('Wrong type');
   
   rv={
         type: tp
      ,  filename: z
      ,  files: f.files||[]
   };
   
   if(tp=='test') {
      //eventBuffer_Write('Ru')
      z2=rv.parts=[];
      parts=f.parts||[];
      for(ii=0, ll=parts.length; ii<ll; ii++) {
         z=parts[ii];
         z2=z.Test||function(){};
         z2();
      };
   }
   else { //- group
      
   };

   return rv;
};

function RunPart(part, callback) {
   var z, z2, z4, zz, tp, parts, i, ii, l, ll
      ,  fn=part.Test||function(){}
      ,  cb=callback||function(){}
      ,  async=0
      ,  done=function() { async=2; __$$_$curLog=ocl; cb(rv); }//function(){}
      ,  rv={
               type: 'part'
            ,  name: part.name||'not named'
            ,  logs: []
         }
      ,  ocl=__$$_$curLog
   ;

   __$$_$curLog=rv.logs;

   z={
         ASync: function() { async=2; }
      ,  Done: function(rval) { rv=rval; eval('done(rval);'); }   
   };

   fn(z);
   if(async) {}//done=function() { cb(rv); };
   else done();

   return rv;
}

function RunFile(path, callback) {
   var z, z2, z4, zz, fn, tp, parts, i, ii, l, ll, rv
      ,  cb=callback||function(){}
   ;

   z=path;
   z2=FileExt(z);
   cout('z='+z);
   f=Load(z);

   if(f instanceof Array) tp='group';
   else if(typeof f=='object') tp='test';
   else throw('Wrong type');
   
   rv={
         type: tp
      ,  filename: z
      ,  files: f.files||[]
   };
   
   if(tp=='test') {
      //eventBuffer_Write('Ru')
      z2=rv.parts=[];
      parts=f.parts||[];
      ii=0;
      
      fn=function() {
         var z;
         if(ii<parts.length) {
            z=parts[ii];
            ii++;
            RunPart(z, function(val) { z2.push(val); fn(); });
         }
         else cb(rv);
      };
      
      fn();
   }
   else { //- group
      
   };

   return {};



}


RunFile(args[2], function(val) {
   var json=JSON.stringify(val);
   fs.writeFile('c:/dev/erin.json', json, 'utf8', function() {
      KeyToExit('Press Enter to exit.');
   });
});



