if(2) {//- Native and globals.
	Object.CopyTo=function(dest, src) { for(var nm in src) dest[nm]=src[nm]; };
	String.prototype.Repeat=function(count) {
		var rv='', i, l=count||0, v=this.valueOf();
		for(i=0; i<l; i++) rv+=v;
		return rv;
	};
	global.$$zz=null;
	global.LOG=console.log;
	var nTest=global.nTest={ File: function(filNam, val) {
		//LOG('nTest.File: filNam='+filNam);
		return { $$isFile: 2, filNam: filNam, val: val};
	}};
   var CloneArray=nTest.CloneArray=function(arr) {
   	if(!arr) return [];
   	var rv=[], i, l=arr.length;
   	for(i=0; i<l; i++) rv.push(arr[i]);
   	return rv;
   };
   var JsonSafeStr=nTest.JsonStr=function(val) {
   	return JSON.stringify(JsonSafeStr.MakeSafeVal(val));
   };
	JsonSafeStr.CheckForDupe=function(val, no, ns) {};
	JsonSafeStr.MakeSafeVal=function(val, no, ns) {
		var i, jj, k=null, k1, k2, l, nm, ns=ns || '<BASE>', rv=val, tp=typeof rv, ya=2, z;
		
		no=(no)? CloneArray(no) : [];
			   		
		if(2) {//-CheckForDupe
			for(i=0, l=no.length; i<l; i++) {
				z=no[i];
				if(z.val===val) return { '<duplicate of>': z.ns };
			};
		};
		
		if(rv) {
   		if(rv instanceof Array) { k=rv=[]; }
   		else if(tp=='function') {
   			rv={ 'TYPE': 'Function', 'CODE': val.toString() };
   			k=rv.MEMBERS={};
   		}
   		else if(tp=='object') { k=rv={}; }
			else { ya=0; };
		
			if(ya) {
   			no.push({ ns: ns, val: val });
   			for(nm in val) {
					//z=val[nm];
   				if(!k[nm]) { 
   					z=val[nm];
						if((!z || (!z.$$prim && !z.$$sys)) && (nm!='Extend' && nm!='Implement')) {
	   					//O.out('  !!^^^^^^  nm = '+nm+'  ^^^^^^!!  ');
	   					k[nm]=JsonSafeStr.MakeSafeVal(z, no, ns+':'+nm);
   					};
   				};
   			};
			};
		
		};
		
		return rv;
	};
};

if(2) {//- vars.
	var z, z2, z4, zz, f, i, ii, l, ll
	   ,  fs=require('fs')
	
	   ,  pth=require('path')
	   ,  DirName=pth.dirname
	
	   ,  buffer=require('buffer').Buffer
	   ,  eventBuffer=new buffer('')
	   ,  eventBuffer_Write=eventBuffer.write
	   ,  events=[]
	
	   ,  args=process.argv
	   ,  cout=console.log
	;
};

function KeyToExit(msg) {
   if(msg) cout('\n\n'+msg);
   process.stdin.setEncoding('utf8');
   process.stdin.on('data', function() { process.exit(); });
   process.stdin.resume();
};

function RunPart(part, callback) {
   var cb, z, z2, tp, fn, filnam, nam=part.name||'not named', rl=60, rv
      ,  async=0
      ,  done=function() {
      		async=2;
				LOG('\n'+']'.Repeat(rl)+'\n  Part: '+rv.name+'\n'+']'.Repeat(rl));
      		if(cb=callback) {
      			var a=arguments, i, l=a.length, z='rv';
      			for(i=0; i<l; i++) z+='z'
      			cb(rv);
   			};
   		}
   ;

	if((z=part.Test)&&z.$$isFile) { filnam=z.filNam; part=z.val; };
	fn=(z=part.Test)? ((z2=z.Test)? z2 : z) : function(){};
	rv={
			name: nam
		,  type: 'part'
		,	filename: filnam||''
		,	pass: 2
		,	passMsg: ''
		,  logs: []
		,  logObjects: []
	};
   z={
         ASync: function() { async=2; }
      ,  Done: function(args) { done.Call(args); }
      ,  Fail: function(msg) {
      		rv.pass=0; rv.passMsg=msg||'';
   			LOG('\n'+'*'.Repeat(78)+'\n ** [[ FAIL - '+(msg||'')+' ]]\n'+'*'.Repeat(78));
   		}
		,	Log: function(val) {
				rv.logs.push(val);
				console.log('Log: '+val);
			}
   };

   LOG('\n'+'['.Repeat(rl)+'\n  Part: '+rv.name+'\n'+'['.Repeat(rl));
	fn(z);
	//try { fn(z); } catch(ex) { throw(JSON.stringify(fn)); };
   if(!async) done(rv);

   return rv;
}

function RunFile(obj, callback) {
   var z, z2, z4, zz, fn, tp, parts, i, ii, l, ll, rv, ct, f=obj, filnam='', rl=74
      ,  cb=callback||function(){}
   ;

	if(f.$$isFile) { filnam=f.filNam; f=f.val; };

   if(f instanceof Array) tp='group';
   else if(typeof f=='object') tp='test';
   else throw('Wrong type');
   
   rv={
         name: ''
      ,  type: tp
      ,  filename: z
      ,  files: f.files||[]
   };
   ct=rv.TOC={};   

   if(tp=='test') {
      //eventBuffer_Write('Ru')
      z2=rv.parts=[];
      rv.name=f.name||'<not named>';
      parts=f.parts||[];
      ii=0; ll=parts.length;
      
      LOG('\n'+'{'.Repeat(rl)+'\n  Test: '+rv.name+'\n'+'{'.Repeat(rl));
      
      fn=function() {
         var z;
         if(ii<ll) {
            z=parts[ii];
            ii++;
            RunPart(z, function(val) {
               ct[ii-1]=val.name||'<not named>';
               z2.push(val);
               fn(); 
            });
         }
         else {
		      LOG('\n'+'}'.Repeat(rl)+'\n  Test: '+rv.name+'\n'+'}'.Repeat(rl));
         	cb(rv);
      	};
      };
      
      fn();
   }
   else { //- group
      //out('GROUP');
      ii=0; ll=f.length;
      z2=rv.tests=[];
      rv.name='Group |  '+path;
      fn=function() {
         var z;
         if(ii<ll) {
            z=f[ii];
            ii++;
            RunFile(z, function(val) {
               ct[ii-1]=val.name||'<not named>';
               z2.push(val);
               fn(); 
            }, 2);
         }
         else cb(rv);
      };
      
      fn();

      //for( i<l; i++) cout('f['+i+']='+f[i]);
   };

   return {};



};


RunFile(nTest.File($$zz=args[2], require($$zz)), function(val) {
   var json=JSON.stringify(val);
   fs.writeFile('d:/dev/erin.json', json, 'utf8', function() {
      KeyToExit('Press Enter to exit.');
   });
});



