if(2) {//-loader
	
	String.prototype.Repeat=function(x) { var l,rv='',v=this.valueOf(); for(l=0; l<x; l++)rv+=v; return rv;};
	String.prototype.Replace=function(old,val,all) {
      var l,a=(old.$type=='array')?old:[[old,val]],rv=this.valueOf(),ln=a.length;
      for(l=0;l<ln;l++){
         if(all)while(rv.search(a[l][0])>-1)rv=rv.replace(a[l][0],a[l][1]);
         else rv=rv.replace(a[l][0],a[l][1]);
      }
		return rv;
	};

   var __$$_$log=LOG=console.log
   	,	__$$_$curLogs=[]
   	,	__$$_$curLogObjects=[]
      ,  __$$_$pth=require('path')
      ,  __$$_$DirName=__$$_$pth.dirname
      ,  __$$_$Join=__$$_$pth.join
      ,  __$$_$fs=require('fs')
      ,  __$$_$ReadFile=__$$_$fs.readFileSync

		,	TestFn=function(fn, args, e, failCondition, failMsg, coutMsg, asVar) {
				var fc=failCondition, tofc=typeof fc, fail 
					,	fm=failMsg||''
					,	RVAL=(asVar)? fn : fn.Call(args||[])
				;
		
				if(!fn && !asVar) { fail=2; fm='TestFn: fn is not set  |  '+fm; }
				else {
					if(tofc=='string') { eval('if('+fc+') fail=2;'); }
					else if(tofc=='function') fail=fc(RVAL);
				};
				if(fail && e) e.Fail(fm);
				if(coutMsg) cout(coutMsg.Replace('RVAL', RVAL, 2));
				
				return RVAL;
			}
		,	TestVal=function(fn, args, e, failCondition, failMsg, coutMsg) {
				return TestFn(fn, args, e, failCondition, failMsg, coutMsg, 2);
			}
   ;

	console.log=function(val) {
		__$$_$curLogs.push(val);
		__$$_$curLogObjects.push({ val: val });
		__$$_$log('console.log - '+val);
	};

   function __$$_$Load(__$$_$path) {
      var __$$_$z
         ,  __$$_$dir=__$$_$DirName(__$$_$path)
         ,  MyPath=function(path) { return __$$_$Join(__$$_$dir, path); }
         ,  __$$_$fc=__$$_$fs.readFileSync(__$$_$path).toString()
         ,  exports={}
      ;
      eval(__$$_$fc);
      return exports;
   };
};
//var _console=console

var z, z2, z4, zz, f, i, ii, l, ll
   ,  fs=require('fs')

   ,  pth=require('path')
   ,  DirName=pth.dirname

   ,  buffer=require('buffer').Buffer
   ,  eventBuffer=new buffer('')
   ,  eventBuffer_Write=eventBuffer.write
   ,  events=[]

   ,  args=process.argv
   ,  cout=console.log
   ,  Load=__$$_$Load

;

function KeyToExit(msg) {
   if(msg) cout('\n\n'+msg);
   process.stdin.setEncoding('utf8');
   process.stdin.on('data', function() { process.exit(); });
   process.stdin.resume();
};
function FileExt(filename) {
    var i=filename.lastIndexOf('.');
    return (i < 0)? '' : filename.substr(i);
};

function Main(filename, evnts) {
   var z, z2, z4, zz, tp, parts, i, ii, l, ll, rv, ev=evnts||events;

   z=filename;
   z2=FileExt(z);

   //out('z='+z);
   f=Load(z);

   if(f instanceof Array) tp='group';
   else if(typeof f=='object') tp='test';
   else throw('Wrong type');
   
   rv={
         type: tp
      ,  filename: z
      ,  files: f.files||[]
   };
   
   if(tp=='test') {
      //eventBuffer_Write('Ru')
      z2=rv.parts=[];
      parts=f.parts||[];
      for(ii=0, ll=parts.length; ii<ll; ii++) {
         z=parts[ii];
         z2=z.Test||function(){};
         z2();
      };
   }
   else { //- group
      
   };

   return rv;
};

function RunPart(part, callback) {
   var cb, z, z2, z4, zz, tp, parts, i, ii, l, ll, F
      ,  ocl=__$$_$curLogs
      ,  oclo=__$$_$curLogObjects
      ,  fn=part.Test||function(){}
      //,  cb=callback||function(){}
      ,  async=0
      ,  rv={
               name: part.name||'not named'
            ,  type: 'part'
				,	pass: 2
				,	passMsg: ''
            ,  logs: []
            ,  logObjects: []
         }
      ,  done=function() {
      		async=2; __$$_$curLogs=ocl; __$$_$curLogObjects=oclo;
      		if(cb) {}
      		if(cb=callback) {
      			var a=arguments, i, l=a.length, z='rv';
      			
      			for(i=0; i<l; i++) z+='z'
      			
      			cb(rv);
   			};
   		}
   ;

   __$$_$curLogs=rv.logs;
   __$$_$curLogObjects=rv.logObjects;

   z={
         ASync: function() { async=2; }
      ,  Done: function(args) { done.Call(args); }
      ,  Fail: function(msg) {
      		rv.pass=0; rv.passMsg=msg||'';
   			LOG('\n'+'*'.Repeat(78)+'\n ** [[ FAIL - '+(msg||'')+' ]]\n'+'*'.Repeat(78));
   		}
   };


   if(typeof fn=='object') fn=Load(fn.file);
	fn(z);
   if(!async) done(rv);

/*	F=function(fn) {
      fn(z);
      if(async) {}//done=function() { cb(rv); };
      else done();
  }; 
//*/

//   if(typeof fn=='object') Load(fn.file, function(val){ F(val); });
//   else F(fn);

   return rv;
}

function RunFile(path, callback) {
   var z, z2, z4, zz, fn, tp, parts, i, ii, l, ll, rv, ct, f
      ,  cb=callback||function(){}
   ;

   z=path;
   z2=FileExt(z);
   //out('z='+z);
   f=Load(z);

   if(f instanceof Array) tp='group';
   else if(typeof f=='object') tp='test';
   else throw('Wrong type');
   
   rv={
         name: ''
      ,  type: tp
      ,  filename: z
      ,  files: f.files||[]
      ,  TOC: {}
   };
   ct=rv.TOC   

   if(tp=='test') {
      //eventBuffer_Write('Ru')
      z2=rv.parts=[];
      rv.name=f.name||'<not named>';
      parts=f.parts||[];
      ii=0; ll=parts.length;
      
      fn=function() {
         var z;
         if(ii<ll) {
            z=parts[ii];
            ii++;
            RunPart(z, function(val) {
               ct[ii-1]=val.name||'<not named>';
               z2.push(val);
               fn(); 
            });
         }
         else cb(rv);
      };
      
      fn();
   }
   else { //- group
      //out('GROUP');
      ii=0; ll=f.length;
      z2=rv.tests=[];
      rv.name='Group |  '+path;
      fn=function() {
         var z;
         if(ii<ll) {
            z=f[ii];
            ii++;
            RunFile(z, function(val) {
               ct[ii-1]=val.name||'<not named>';
               z2.push(val);
               fn(); 
            });
         }
         else cb(rv);
      };
      
      fn();

      //for( i<l; i++) cout('f['+i+']='+f[i]);
   };

   return {};



};


RunFile(args[2], function(val) {
   var json=JSON.stringify(val);
   fs.writeFile('c:/dev/erin.json', json, 'utf8', function() {
      KeyToExit('Press Enter to exit.');
   });
});



